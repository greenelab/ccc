         2594 function calls (2588 primitive calls) in 6.017 seconds

   Ordered by: cumulative time
   List reduced from 138 to 50 due to restriction <50>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    6.017    6.017 {built-in method builtins.exec}
        1    0.000    0.000    6.017    6.017 <string>:1(<module>)
        1    0.000    0.000    6.017    6.017 1575429100.py:1(func)
        1    0.002    0.002    6.017    6.017 impl.py:367(ccc)
       57    0.000    0.000    6.013    0.105 _base.py:602(result_iterator)
       55    0.000    0.000    6.013    0.109 _base.py:418(result)
      101    0.000    0.000    6.013    0.060 threading.py:280(wait)
      295    6.012    0.020    6.012    0.020 {method 'acquire' of '_thread.lock' objects}
        2    0.000    0.000    0.000    0.000 _base.py:573(map)
        2    0.000    0.000    0.000    0.000 _base.py:598(<listcomp>)
       55    0.000    0.000    0.000    0.000 thread.py:161(submit)
        2    0.000    0.000    0.000    0.000 {built-in method numpy.zeros}
       55    0.000    0.000    0.000    0.000 thread.py:180(_adjust_thread_count)
        1    0.000    0.000    0.000    0.000 {method 'seed' of 'numpy.random.mtrand.RandomState' objects}
       55    0.000    0.000    0.000    0.000 threading.py:404(acquire)
        1    0.000    0.000    0.000    0.000 _base.py:636(__exit__)
        1    0.000    0.000    0.000    0.000 thread.py:216(shutdown)
        1    0.000    0.000    0.000    0.000 threading.py:1021(join)
        1    0.000    0.000    0.000    0.000 threading.py:1059(_wait_for_tstate_lock)
        9    0.000    0.000    0.000    0.000 typedlist.py:341(append)
       55    0.000    0.000    0.000    0.000 {method '_acquire_restore' of '_thread.RLock' objects}
        1    0.000    0.000    0.000    0.000 random.py:791(getrandbits)
        1    0.000    0.000    0.000    0.000 {built-in method posix.urandom}
        1    0.000    0.000    0.000    0.000 typedlist.py:298(_initialise_list)
      111    0.000    0.000    0.000    0.000 threading.py:259(__exit__)
       55    0.000    0.000    0.000    0.000 _base.py:318(__init__)
      111    0.000    0.000    0.000    0.000 threading.py:256(__enter__)
        1    0.000    0.000    0.000    0.000 contextlib.py:76(inner)
        1    0.000    0.000    0.000    0.000 threading.py:873(start)
       57    0.000    0.000    0.000    0.000 threading.py:228(__init__)
        2    0.000    0.000    0.000    0.000 abstract.py:60(__call__)
        1    0.000    0.000    0.000    0.000 {function SeedSequence.generate_state at 0x7fdf8037c790}
       55    0.000    0.000    0.000    0.000 _base.py:388(__get_result)
        1    0.000    0.000    0.000    0.000 threading.py:556(wait)
       55    0.000    0.000    0.000    0.000 {method '_release_save' of '_thread.RLock' objects}
        1    0.000    0.000    0.000    0.000 typedlist.py:270(_parse_arg)
      104    0.000    0.000    0.000    0.000 {built-in method _thread.allocate_lock}
        2    0.000    0.000    0.000    0.000 typeof.py:25(typeof)
        2    0.000    0.000    0.000    0.000 functools.py:883(wrapper)
       55    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {built-in method _thread.start_new_thread}
        2    0.000    0.000    0.000    0.000 abstract.py:48(_intern)
       55    0.000    0.000    0.000    0.000 {method '__enter__' of '_thread.RLock' objects}
        3    0.000    0.000    0.000    0.000 numeric.py:289(full)
        1    0.000    0.000    0.000    0.000 dispatcher.py:677(typeof_pyval)
        2    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
        4    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
        1    0.000    0.000    0.000    0.000 <__array_function__ internals>:2(concatenate)
      101    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}
       56    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.RLock' objects}