         928 function calls (924 primitive calls) in 4.986 seconds

   Ordered by: cumulative time
   List reduced from 96 to 50 due to restriction <50>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    4.986    4.986 {built-in method builtins.exec}
        1    0.000    0.000    4.986    4.986 <string>:1(<module>)
        1    0.000    0.000    4.986    4.986 1750096170.py:1(func)
        1    0.001    0.001    4.986    4.986 coef.py:275(cm)
       24    0.000    0.000    4.983    0.208 threading.py:280(wait)
       75    4.983    0.066    4.983    0.066 {method 'acquire' of '_thread.lock' objects}
       20    0.000    0.000    4.983    0.249 _base.py:601(result_iterator)
       18    0.000    0.000    4.983    0.277 _base.py:417(result)
        2    0.000    0.000    0.001    0.000 _base.py:572(map)
        2    0.000    0.000    0.001    0.000 _base.py:597(<listcomp>)
       18    0.000    0.000    0.001    0.000 thread.py:155(submit)
       18    0.000    0.000    0.001    0.000 thread.py:174(_adjust_thread_count)
        3    0.000    0.000    0.000    0.000 threading.py:873(start)
        3    0.000    0.000    0.000    0.000 threading.py:556(wait)
        1    0.000    0.000    0.000    0.000 _base.py:635(__exit__)
        1    0.000    0.000    0.000    0.000 thread.py:210(shutdown)
        2    0.000    0.000    0.000    0.000 {built-in method numpy.zeros}
        3    0.000    0.000    0.000    0.000 threading.py:1021(join)
        3    0.000    0.000    0.000    0.000 threading.py:1059(_wait_for_tstate_lock)
       18    0.000    0.000    0.000    0.000 threading.py:404(acquire)
      6/2    0.000    0.000    0.000    0.000 coef.py:233(get_chunks)
        3    0.000    0.000    0.000    0.000 {built-in method _thread.start_new_thread}
       39    0.000    0.000    0.000    0.000 threading.py:256(__enter__)
       18    0.000    0.000    0.000    0.000 _base.py:317(__init__)
       22    0.000    0.000    0.000    0.000 threading.py:228(__init__)
        1    0.000    0.000    0.000    0.000 numeric.py:289(full)
        3    0.000    0.000    0.000    0.000 threading.py:795(__init__)
        3    0.000    0.000    0.000    0.000 threading.py:985(_stop)
        1    0.000    0.000    0.000    0.000 coef.py:74(_get_range_n_clusters)
       15    0.000    0.000    0.000    0.000 {method 'release' of '_thread.lock' objects}
       39    0.000    0.000    0.000    0.000 threading.py:259(__exit__)
       28    0.000    0.000    0.000    0.000 utils.py:107(<genexpr>)
        3    0.000    0.000    0.000    0.000 threading.py:768(_maintain_shutdown_locks)
        1    0.000    0.000    0.000    0.000 <__array_function__ internals>:2(copyto)
       12    0.000    0.000    0.000    0.000 {method '_release_save' of '_thread.RLock' objects}
       12    0.000    0.000    0.000    0.000 threading.py:271(_is_owned)
        1    0.000    0.000    0.000    0.000 {built-in method numpy.array}
        1    0.000    0.000    0.000    0.000 parallel.py:596(get_num_threads)
       21    0.000    0.000    0.000    0.000 {method '__enter__' of '_thread.lock' objects}
        1    0.000    0.000    0.000    0.000 thread.py:117(__init__)
       12    0.000    0.000    0.000    0.000 {method '_acquire_restore' of '_thread.RLock' objects}
        1    0.000    0.000    0.000    0.000 {built-in method numpy.asarray}
       12    0.000    0.000    0.000    0.000 {method '_is_owned' of '_thread.RLock' objects}
       19    0.000    0.000    0.000    0.000 {method 'put' of '_queue.SimpleQueue' objects}
        3    0.000    0.000    0.000    0.000 threading.py:521(__init__)
       29    0.000    0.000    0.000    0.000 {built-in method _thread.allocate_lock}
       18    0.000    0.000    0.000    0.000 threading.py:82(RLock)
       18    0.000    0.000    0.000    0.000 {method '__enter__' of '_thread.RLock' objects}
        1    0.000    0.000    0.000    0.000 parallel.py:373(_launch_threads)
        1    0.000    0.000    0.000    0.000 threading.py:398(__init__)