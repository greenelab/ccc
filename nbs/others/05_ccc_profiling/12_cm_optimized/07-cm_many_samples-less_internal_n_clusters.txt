         2564 function calls (2558 primitive calls) in 0.858 seconds

   Ordered by: cumulative time
   List reduced from 138 to 50 due to restriction <50>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.858    0.858 {built-in method builtins.exec}
        1    0.000    0.000    0.858    0.858 <string>:1(<module>)
        1    0.000    0.000    0.858    0.858 3466635110.py:1(func)
        1    0.001    0.001    0.858    0.858 impl.py:367(ccc)
       57    0.000    0.000    0.857    0.015 _base.py:602(result_iterator)
       55    0.000    0.000    0.857    0.016 _base.py:418(result)
      101    0.000    0.000    0.856    0.008 threading.py:280(wait)
      295    0.856    0.003    0.856    0.003 {method 'acquire' of '_thread.lock' objects}
        2    0.000    0.000    0.000    0.000 _base.py:573(map)
        2    0.000    0.000    0.000    0.000 _base.py:598(<listcomp>)
       55    0.000    0.000    0.000    0.000 thread.py:161(submit)
       55    0.000    0.000    0.000    0.000 thread.py:180(_adjust_thread_count)
        1    0.000    0.000    0.000    0.000 {method 'seed' of 'numpy.random.mtrand.RandomState' objects}
        1    0.000    0.000    0.000    0.000 contextlib.py:76(inner)
       55    0.000    0.000    0.000    0.000 threading.py:404(acquire)
        2    0.000    0.000    0.000    0.000 {built-in method numpy.zeros}
        1    0.000    0.000    0.000    0.000 {function SeedSequence.generate_state at 0x7f50cdba6790}
        4    0.000    0.000    0.000    0.000 typedlist.py:341(append)
        1    0.000    0.000    0.000    0.000 _base.py:636(__exit__)
        1    0.000    0.000    0.000    0.000 thread.py:216(shutdown)
        1    0.000    0.000    0.000    0.000 threading.py:1021(join)
        1    0.000    0.000    0.000    0.000 threading.py:1059(_wait_for_tstate_lock)
        1    0.000    0.000    0.000    0.000 typedlist.py:298(_initialise_list)
       55    0.000    0.000    0.000    0.000 _base.py:318(__init__)
        1    0.000    0.000    0.000    0.000 threading.py:873(start)
        1    0.000    0.000    0.000    0.000 random.py:791(getrandbits)
       57    0.000    0.000    0.000    0.000 threading.py:228(__init__)
      111    0.000    0.000    0.000    0.000 threading.py:259(__exit__)
        1    0.000    0.000    0.000    0.000 {built-in method posix.urandom}
      111    0.000    0.000    0.000    0.000 threading.py:256(__enter__)
        2    0.000    0.000    0.000    0.000 abstract.py:60(__call__)
       55    0.000    0.000    0.000    0.000 {method '_acquire_restore' of '_thread.RLock' objects}
        1    0.000    0.000    0.000    0.000 threading.py:556(wait)
        1    0.000    0.000    0.000    0.000 typedlist.py:270(_parse_arg)
        2    0.000    0.000    0.000    0.000 typeof.py:25(typeof)
        2    0.000    0.000    0.000    0.000 functools.py:883(wrapper)
        2    0.000    0.000    0.000    0.000 abstract.py:48(_intern)
        1    0.000    0.000    0.000    0.000 dispatcher.py:677(typeof_pyval)
        3    0.000    0.000    0.000    0.000 numeric.py:289(full)
       55    0.000    0.000    0.000    0.000 _base.py:388(__get_result)
        2    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 {built-in method _thread.start_new_thread}
      104    0.000    0.000    0.000    0.000 {built-in method _thread.allocate_lock}
        1    0.000    0.000    0.000    0.000 containers.py:618(__init__)
       46    0.000    0.000    0.000    0.000 threading.py:271(_is_owned)
       55    0.000    0.000    0.000    0.000 {method '__enter__' of '_thread.RLock' objects}
        1    0.000    0.000    0.000    0.000 threading.py:795(__init__)
       55    0.000    0.000    0.000    0.000 {method '_release_save' of '_thread.RLock' objects}
        1    0.000    0.000    0.000    0.000 typeof.py:257(_typeof_nb_type)
      101    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}