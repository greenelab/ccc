         2454 function calls in 0.582 seconds

   Ordered by: cumulative time
   List reduced from 99 to 50 due to restriction <50>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.582    0.582 {built-in method builtins.exec}
        1    0.000    0.000    0.582    0.582 <string>:1(<module>)
        1    0.000    0.000    0.582    0.582 3466635110.py:1(func)
        1    0.001    0.001    0.582    0.582 impl.py:367(ccc)
       57    0.000    0.000    0.579    0.010 _base.py:602(result_iterator)
       55    0.000    0.000    0.579    0.011 _base.py:418(result)
      101    0.000    0.000    0.579    0.006 threading.py:280(wait)
      295    0.578    0.002    0.578    0.002 {method 'acquire' of '_thread.lock' objects}
        2    0.000    0.000    0.001    0.000 _base.py:573(map)
        2    0.000    0.000    0.001    0.000 _base.py:598(<listcomp>)
       55    0.000    0.000    0.001    0.000 thread.py:161(submit)
       55    0.000    0.000    0.000    0.000 thread.py:180(_adjust_thread_count)
        1    0.000    0.000    0.000    0.000 {method 'seed' of 'numpy.random.mtrand.RandomState' objects}
       55    0.000    0.000    0.000    0.000 threading.py:404(acquire)
        1    0.000    0.000    0.000    0.000 random.py:791(getrandbits)
        1    0.000    0.000    0.000    0.000 {built-in method posix.urandom}
       55    0.000    0.000    0.000    0.000 _base.py:318(__init__)
        2    0.000    0.000    0.000    0.000 {built-in method numpy.zeros}
        1    0.000    0.000    0.000    0.000 _base.py:636(__exit__)
        1    0.000    0.000    0.000    0.000 thread.py:216(shutdown)
        1    0.000    0.000    0.000    0.000 threading.py:1021(join)
       57    0.000    0.000    0.000    0.000 threading.py:228(__init__)
        1    0.000    0.000    0.000    0.000 threading.py:1059(_wait_for_tstate_lock)
        1    0.000    0.000    0.000    0.000 threading.py:873(start)
       55    0.000    0.000    0.000    0.000 {method '_acquire_restore' of '_thread.RLock' objects}
      111    0.000    0.000    0.000    0.000 threading.py:259(__exit__)
      111    0.000    0.000    0.000    0.000 threading.py:256(__enter__)
        1    0.000    0.000    0.000    0.000 contextlib.py:76(inner)
        1    0.000    0.000    0.000    0.000 {function SeedSequence.generate_state at 0x7f2984e49790}
        1    0.000    0.000    0.000    0.000 threading.py:556(wait)
      104    0.000    0.000    0.000    0.000 {built-in method _thread.allocate_lock}
        1    0.000    0.000    0.000    0.000 {built-in method _thread.start_new_thread}
       55    0.000    0.000    0.000    0.000 {method '_release_save' of '_thread.RLock' objects}
        3    0.000    0.000    0.000    0.000 numeric.py:289(full)
       55    0.000    0.000    0.000    0.000 {method '__enter__' of '_thread.RLock' objects}
       55    0.000    0.000    0.000    0.000 _base.py:388(__get_result)
        1    0.000    0.000    0.000    0.000 threading.py:795(__init__)
       46    0.000    0.000    0.000    0.000 threading.py:271(_is_owned)
       55    0.000    0.000    0.000    0.000 threading.py:82(RLock)
       55    0.000    0.000    0.000    0.000 thread.py:47(__init__)
       56    0.000    0.000    0.000    0.000 {method 'put' of '_queue.SimpleQueue' objects}
        1    0.000    0.000    0.000    0.000 thread.py:123(__init__)
       55    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}
       46    0.000    0.000    0.000    0.000 threading.py:265(_release_save)
        4    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
        1    0.000    0.000    0.000    0.000 threading.py:985(_stop)
      101    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}
      168    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.lock' objects}
       56    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.RLock' objects}
       46    0.000    0.000    0.000    0.000 threading.py:268(_acquire_restore)