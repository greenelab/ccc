         21092455 function calls (21092449 primitive calls) in 99.101 seconds

   Ordered by: cumulative time
   List reduced from 167 to 50 due to restriction <50>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000   99.101   99.101 {built-in method builtins.exec}
        1    0.000    0.000   99.101   99.101 <string>:1(<module>)
        1    0.000    0.000   99.101   99.101 1375007101.py:1(func)
        1    0.008    0.008   99.101   99.101 impl.py:511(ccc)
        1    0.913    0.913   98.744   98.744 impl.py:405(compute_coef)
   124750    0.324    0.000   97.798    0.001 impl.py:344(compute_ccc)
   124750   24.820    0.000   97.238    0.001 impl.py:191(cdist_parts_basic)
 10104750   44.939    0.000   72.368    0.000 metrics.py:107(adjusted_rand_index)
 10104750   27.430    0.000   27.430    0.000 metrics.py:72(get_pair_confusion_matrix)
        1    0.016    0.016    0.343    0.343 impl.py:154(get_feature_parts)
     4500    0.324    0.000    0.324    0.000 impl.py:110(get_parts)
   124750    0.114    0.000    0.114    0.000 {method 'argmax' of 'numpy.ndarray' objects}
   124750    0.072    0.000    0.072    0.000 core.py:85(unravel_index_2d)
   124750    0.050    0.000    0.050    0.000 {built-in method builtins.max}
   124754    0.050    0.000    0.050    0.000 {built-in method numpy.zeros}
   124750    0.032    0.000    0.032    0.000 impl.py:255(get_coords_from_index)
     4500    0.003    0.000    0.003    0.000 {built-in method numpy.array}
        1    0.003    0.003    0.003    0.003 impl.py:688(<listcomp>)
        1    0.000    0.000    0.001    0.001 impl.py:699(<listcomp>)
        1    0.001    0.001    0.001    0.001 impl.py:700(<listcomp>)
        5    0.000    0.000    0.001    0.000 numeric.py:289(full)
        6    0.001    0.000    0.001    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
        5    0.000    0.000    0.001    0.000 <__array_function__ internals>:2(copyto)
        1    0.000    0.000    0.000    0.000 process.py:573(__init__)
        2    0.000    0.000    0.000    0.000 impl.py:279(get_chunks)
        1    0.000    0.000    0.000    0.000 {built-in method numpy.arange}
        5    0.000    0.000    0.000    0.000 synchronize.py:50(__init__)
        1    0.000    0.000    0.000    0.000 impl.py:713(<listcomp>)
        4    0.000    0.000    0.000    0.000 context.py:65(Lock)
        1    0.000    0.000    0.000    0.000 process.py:160(__init__)
        4    0.000    0.000    0.000    0.000 synchronize.py:161(__init__)
        1    0.000    0.000    0.000    0.000 queues.py:37(__init__)
        1    0.000    0.000    0.000    0.000 {method 'seed' of 'numpy.random.mtrand.RandomState' objects}
        2    0.000    0.000    0.000    0.000 _base.py:636(__exit__)
        1    0.000    0.000    0.000    0.000 process.py:731(shutdown)
        1    0.000    0.000    0.000    0.000 impl.py:714(<listcomp>)
        9    0.000    0.000    0.000    0.000 typedlist.py:341(append)
        1    0.000    0.000    0.000    0.000 typedlist.py:298(_initialise_list)
        1    0.000    0.000    0.000    0.000 context.py:110(SimpleQueue)
        1    0.000    0.000    0.000    0.000 contextlib.py:76(inner)
        1    0.000    0.000    0.000    0.000 queues.py:340(__init__)
        5    0.000    0.000    0.000    0.000 synchronize.py:114(_make_name)
       11    0.000    0.000    0.000    0.000 {built-in method builtins.next}
        5    0.000    0.000    0.000    0.000 tempfile.py:149(__next__)
        1    0.000    0.000    0.000    0.000 {function SeedSequence.generate_state at 0x7f75101d79d0}
        5    0.000    0.000    0.000    0.000 tempfile.py:152(<listcomp>)
       40    0.000    0.000    0.000    0.000 random.py:343(choice)
        2    0.000    0.000    0.000    0.000 abstract.py:60(__call__)
        1    0.000    0.000    0.000    0.000 context.py:85(BoundedSemaphore)
        1    0.000    0.000    0.000    0.000 random.py:791(getrandbits)