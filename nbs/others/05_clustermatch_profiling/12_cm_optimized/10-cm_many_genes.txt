         52519760 function calls (51771260 primitive calls) in 277.174 seconds

   Ordered by: cumulative time
   List reduced from 106 to 50 due to restriction <50>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000  277.174  277.174 {built-in method builtins.exec}
        1    0.000    0.000  277.174  277.174 <string>:1(<module>)
        1    0.486    0.486  277.174  277.174 1514735963.py:1(func)
   124750    4.967    0.000  276.689    0.002 impl.py:307(ccc)
   249500    0.287    0.000  140.640    0.001 impl.py:476(compute_parts)
   249500    1.098    0.000  139.520    0.001 impl.py:478(<listcomp>)
   249500  138.422    0.001  138.422    0.001 impl.py:110(get_parts)
   124750    2.239    0.000  101.929    0.001 impl.py:508(compute_coef)
   124750   24.627    0.000   97.255    0.001 impl.py:154(cdist_parts_basic)
 10104750   45.114    0.000   72.588    0.000 metrics.py:107(adjusted_rand_index)
 10104750   27.474    0.000   27.474    0.000 metrics.py:72(get_pair_confusion_matrix)
   124750    5.197    0.000   15.617    0.000 {method 'seed' of 'numpy.random.mtrand.RandomState' objects}
   124750    0.208    0.000    9.500    0.000 contextlib.py:76(inner)
  1122750    2.028    0.000    8.340    0.000 typedlist.py:341(append)
   124750    8.297    0.000    8.297    0.000 {function SeedSequence.generate_state at 0x7fab340b79d0}
   124750    0.285    0.000    5.010    0.000 typedlist.py:298(_initialise_list)
   249500    0.306    0.000    2.627    0.000 abstract.py:60(__call__)
   124750    0.492    0.000    2.275    0.000 typedlist.py:270(_parse_arg)
   249500    0.201    0.000    2.159    0.000 typeof.py:25(typeof)
   623751    0.509    0.000    2.101    0.000 numeric.py:289(full)
   873251    0.925    0.000    2.027    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
   249500    0.171    0.000    1.829    0.000 functools.py:883(wrapper)
   249500    0.964    0.000    1.758    0.000 impl.py:242(get_chunks)
   124750    0.152    0.000    1.668    0.000 dispatcher.py:677(typeof_pyval)
   249500    0.176    0.000    1.354    0.000 abstract.py:48(_intern)
   124750    0.088    0.000    1.281    0.000 <__array_function__ internals>:2(amax)
   249500    0.327    0.000    1.178    0.000 {method 'get' of 'dict' objects}
   124750    0.142    0.000    1.151    0.000 typeof.py:257(_typeof_nb_type)
   124750    0.140    0.000    1.101    0.000 fromnumeric.py:2638(amax)
   623751    0.381    0.000    1.075    0.000 <__array_function__ internals>:2(copyto)
   124750    0.276    0.000    0.962    0.000 fromnumeric.py:69(_wrapreduction)
  1122750    0.702    0.000    0.960    0.000 typedlist.py:81(_append)
   249500    0.833    0.000    0.833    0.000 {built-in method numpy.array}
   249500    0.343    0.000    0.783    0.000 _ufunc_config.py:32(seterr)
   124750    0.349    0.000    0.752    0.000 thread.py:123(__init__)
   124750    0.266    0.000    0.745    0.000 containers.py:618(__init__)
   124750    0.104    0.000    0.588    0.000 _ufunc_config.py:429(__enter__)
   124750    0.145    0.000    0.573    0.000 random.py:791(getrandbits)
   124750    0.559    0.000    0.559    0.000 {method 'reduce' of 'numpy.ufunc' objects}
1497000/1247500    0.408    0.000    0.502    0.000 abstract.py:120(__eq__)
  1122750    0.230    0.000    0.466    0.000 {built-in method builtins.isinstance}
   623751    0.415    0.000    0.415    0.000 {built-in method numpy.empty}
   124750    0.403    0.000    0.403    0.000 {built-in method posix.urandom}
   623750    0.403    0.000    0.403    0.000 {built-in method numpy.zeros}
   124750    0.093    0.000    0.393    0.000 _ufunc_config.py:434(__exit__)
   124750    0.091    0.000    0.390    0.000 threading.py:398(__init__)
499000/249500    0.199    0.000    0.349    0.000 abstract.py:117(__hash__)
   124750    0.090    0.000    0.347    0.000 <__array_function__ internals>:2(concatenate)
   124750    0.096    0.000    0.336    0.000 _base.py:636(__exit__)
   249500    0.153    0.000    0.302    0.000 functools.py:817(dispatch)