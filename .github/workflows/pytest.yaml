name: tests
on:
  push:
  pull_request:
    types: [opened, reopened]

env:
  # Increase this value to reset cache if environment.yml has not changed.
  PY_CACHE_NUMBER: 2
  PY_ENV: cm_gene_expr

jobs:
  pytest:
    name: Python tests
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        python-version: [3.9]
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v2
        with:
          lfs: false
      - name: Cache conda
        id: cache
        uses: actions/cache@v2
        with:
          path: "${{ env.PY_ENV }}.tar.gz"
          key: ${{ runner.os }}-${{ env.PY_CACHE_NUMBER }}-${{ hashFiles('environment/environment.yml') }}
      - name: Setup Miniconda
        if: steps.cache.outputs.cache-hit != 'true'
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
          auto-update-conda: true
          activate-environment: ${{ env.PY_ENV }}
          channel-priority: strict
          environment-file: environment/environment.yml
          auto-activate-base: false
      - name: Conda-Pack
        if: steps.cache.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          conda install --yes -c conda-forge conda-pack coverage
          conda pack -f -n ${{ env.PY_ENV }} -o "${{ env.PY_ENV }}.tar.gz"
      - name: Unpack environment
        shell: bash -l {0}
        run: |
          mkdir -p "${{ env.PY_ENV }}"
          tar -xzf "${{ env.PY_ENV }}.tar.gz" -C "${{ env.PY_ENV }}"
      - name: Setup data and run pytest (Windows systems)
        if: runner.os == 'Windows'
        env:
          PYTHONPATH: libs/
        shell: cmd
        run: |
          echo on
          cd ${{ env.PY_ENV }}
          call .\Scripts\activate.bat
          .\Scripts\conda-unpack.exe
          cd ..
          python environment\scripts\setup_data.py --mode testing
          pytest -v -rs tests
      - name: Setup data and run pytest (non-Windows systems)
        if: runner.os != 'Windows'
        shell: bash
        env:
          PYTHONPATH: libs/
        run: |
          source ${{ env.PY_ENV }}/bin/activate
          conda-unpack

          python environment/scripts/setup_data.py --mode testing

          if [ "$RUNNER_OS" == "Linux" ]; then
            coverage run --source=libs/ -m pytest -v -rs tests
            coverage xml -o coverage.xml
          else
            pytest -v -rs tests
          fi
      - name: Codecov upload
        if: runner.os == 'Linux'
        uses: codecov/codecov-action@v2
        with:
          files: ./coverage.xml
          name: codecov-${{ matrix.os }}-python${{ matrix.python-version }}
          fail_ci_if_error: true
          verbose: true
